{
  "en": {
    "slides": [
      {
        "type": "host",
        "hostNotes": [
          {
            "text": "Welcome. I am X and today we will work for around 30 minutes on xx\n\nWe’ll be doing xx ex. meditation followed by time for reflection and sharing with each other."
          },
          {
            "text": "Let’s start with a mini check-in. How are you feeling right now? Please answer in two-three words. X, would you like to start?\n\n> Let everyone in the session, including yourself, check in one by one.\n\nThank you all for checking in. Let’s get started."
          }
        ]
      },
      {
        "type": "content",
        "hostNotes": [
          {
            "text": "Find a comfortable position. I will start the audio exercise and we'll meet back here afterwards. \n\n> Push play to start the audio exercise"
          }
        ],
        "content": {
          "lottie": {
            "subtitles": "https://res.cloudinary.com/cupcake-29k/raw/upload/v1710426301/SRT%20%28captions%29%20files/Compassionate_intention_q45eop.srt",
            "audio": "https://res.cloudinary.com/cupcake-29k/video/upload/v1710426353/Audio/Compassionate_intention_svuq74.mp3",
            "durationTimer": true,
            "source": "https://res.cloudinary.com/cupcake-29k/raw/upload/t_card_image/v1676977421/Lottie/audio_meditation_default_black_default_omemwt.json"
          }
        }
      },
      {
        "type": "reflection",
        "hostNotes": [
          {
            "text": "Now we’ll take 1 minute to reflect on our own.\n\nxxMain question\n\nxxFurther explanations of main question if needed"
          },
          {
            "text": "You can take notes on a piece of paper or just mental notes in your head. And there is no right or wrong here, our answers are our own. 1 minute starting now.\n\n> Press play to start the timer.\n\nThat’s 1 minute and it’s time to move on."
          }
        ],
        "content": {
          "lottie": {
            "durationTimer": true,
            "duration": 60,
            "source": "https://res.cloudinary.com/cupcake-29k/raw/upload/t_card_image/v1676642915/Lottie/default_1min_black_rosi2l.json"
          }
        }
      },
      {
        "type": "sharing",
        "hostNotes": [
          {
            "text": "Now we are getting into the sharing part. We have three rules for sharing:\n\n1. **What is said in here, stays in here.**\n2. **All you need to do is listen.** There is no fixing, helping or advice-giving needed. We are just showing up and exploring what ourselves and others are going through."
          },
          {
            "text": "3. **Everything on the inside is okay.** Anger, love, hatred, sadness. Whatever shows up. No wrongs, no rights. It is what it is.\n\nThere will be a timer set for 2 minutes as an indicator. If you don’t want to share you can always say ‘pass’."
          },
          {
            "text": "Who would like to start?\n\n> Let everyone (or as many as you got time for) share one by one. Press play to start the timer. Re-start for each new sharing.\n\nThank you so much everyone."
          }
        ],
        "id": "Sharing 1",
        "content": {
          "lottie": {
            "durationTimer": true,
            "duration": 120,
            "source": "https://res.cloudinary.com/cupcake-29k/raw/upload/t_card_image/v1676639253/Lottie/default_2min_black_o6egey.json"
          }
        }
      },
      {
        "type": "host",
        "hostNotes": [
          {
            "text": "Well done. If you’re up for it, you can continue what we started here today with a mission to bring this into your everyday life.\n\nxx mission description"
          },
          {
            "text": "Before we leave this space let’s do a mini check-out. \n\nHow are you feeling right now? Has anything shifted? Please answer in two-three words."
          },
          {
            "text": "Who would like to start?\n\n> Let everyone in the session check out one by one.\n\nThank you all for checking out and for joining this session today.\n\n> Finish session to send everyone off to the exit experience."
          }
        ]
      },
      {
        "type": "instruction",
        "content": {
          "text": "Well done.\n\nSummary.\n\nIf you’re up for it, you can continue with this mission.\n\nmission description",
          "image": {
            "source": "https://res.cloudinary.com/cupcake-29k/image/upload/q_auto,t_global/v1711547457/Images/card_Compassionate_intention_ub0tzl.png"
          }
        }
      }
    ],
    "theme": {
      "textColor": "#2E2E2E",
      "backgroundColor": "#55e069"
    },
    "hidden": true,
    "locked": false,
    "name": "Compassionate intention",
    "live": true,
    "published": true,
    "card": {
      "image": {
        "source": "https://res.cloudinary.com/cupcake-29k/image/upload/t_card_image/v1711547457/Images/card_Compassionate_intention_ub0tzl.png"
      }
    },
    "coCreators": [
      {
        "name": "Jenny Rickardsson, script, editor",
        "url": "https://www.linkedin.com/in/jenny-rickardson-6770a959/?originalSubdomain=se",
        "image": "https://res.cloudinary.com/cupcake-29k/image/upload/t_cocreator_image/v1665413228/Contributors/Jenny%20Rickardsson.jpg"
      },
      {
        "name": "Kristin Neff & Chris Germer, original research",
        "url": "https://centerformsc.org/about/",
        "image": "https://res.cloudinary.com/cupcake-29k/image/upload/t_cocreator_image/v1697723039/Images/Germer%2C%20Neff.png"
      },
      {
        "name": "Tabitha, AI-generated voice",
        "url": "https://www.descript.com/ai-voices",
        "image": "https://res.cloudinary.com/cupcake-29k/image/upload/t_cocreator_image/v1710239861/Contributors/descript_ps0olu.webp"
      }
    ],
    "duration": 30,
    "introPortal": {
      "textColor": "#2E2E2E",
      "hostNotes": [
        {
          "text": "> Start the session when you're ready to go"
        }
      ],
      "videoLoop": {
        "p5JsScript": {
          "lang": "javascript",
          "code": "const sketch = (p) => {\n    let H = 1920;\n    let W = 1080;\n\n    let min_width;\n    let max_width;\n\n    let G;\n\n    let SEED;\n\n    let flocks = [];\n    let base_color;\n\n    let ID, ID2;\n    let PRE_COL;\n\n    let POSX = [];\n    let POSY = [];\n    let C1 = 7;\n    let C4 = 100;\n    let C02;\n    let C2 = 4;\n    let C3 = 3;\n\n    let FRAME1 = 360;//360;\n    let FRAME2 = 180;\n    let FRAME3 = 180;\n    let FRAME4 = 90;\n\n    let BACK_COL;\n\n\n    let T_TYPE = [];\n    let T_SPEED = [];\n    let T_RAD = [];\n    let T_MCOH = [];\n    let T_ICOH = [];\n\n    let T_RED = [];\n    let T_GREEN = [];\n    let T_BLUE = [];\n\n    let OS_X = [];\n    let OS_Y = [];\n\n    p.setup = () => {\n        p.createCanvas(p.windowWidth, p.windowHeight);\n        G = p.createGraphics(W, H);\n\n        min_width = p.min(p.width, p.height);\n        max_width = p.max(p.width, p.height);\n\n        //SEED = fxrand()*998244353;\n        SEED = p.random()*998244353;\n\n        p.randomSeed(SEED);\n        p.noiseSeed(SEED);\n\n        base_color = p.random(256);\n\n        G.rectMode(p.CENTER);\n        G.noStroke();\n\n        let bsel = p.int(p.random(2));\n        let bcol = [60, 200];\n        BACK_COL = bcol[bsel];\n\n        POSX.length = 50;\n        POSY.length = 50;\n\n\n        ID = [0,1,2];\n        ID2 = [0,1,2];\n        p.shuffle(ID, true);\n        p.shuffle(ID2, true);\n        \n        PRE_COL = [\n            p.random(75) + 70,\n            p.random(75) + 35,\n            p.random(35),\n        ];\n\n        for(let i=0;i<C1;++i){\n            POSX[i] = p.random(-W/3,W/3)+W/2;\n            POSY[i] = p.random(-H/4,H/2)+H/2;\n        }\n        let cycle1 = [120, 180, 360];\n        let csel = p.int(p.random(3));\n        let mx_coh = 1.0;//p.random(1.3, 1.5);\n        flocks.push(new Flock());\n        for(let i = 0; i < 500; ++i) {\n            flocks[0].add(new Particle(0, 0, 7.5, 150, FRAME1, cycle1[csel], 0.0, mx_coh, 10, p.int(p.random(C1))));\n        }\n\n        T_RED = [];\n        T_GREEN = [];\n        T_BLUE = [];\n        for(let i=0;i<C4;++i){\n            POSX[i] = p.random(-W/2,W/2)+W/2;\n            POSY[i] = p.random(-H/2,H/2)+H/2;\n            T_RED.push(p.random(30, 220));\n            T_GREEN.push(p.random(30, 220));\n            T_BLUE.push(p.random(30, 220));\n        }\n        \n        let cycle4 = [45, 90];\n        mx_coh = .6;\n        flocks.push(new Flock());\n        for(let i = 0; i < 500; ++i) {\n            let csel4 = p.int(p.random(2));\n            flocks[1].add(new Particle(2, 1, 1.5, 20, FRAME4, cycle4[csel4], 0.0, mx_coh, 10, p.int(p.random(C4))));\n        }\n\n        let mode = 1;\n        if (mode == 1) {\n\n            for (let ii=0;ii<2;++ii){\n                let X2 = [];\n                let n_tree = p.int(p.random(6, 10));\n                let fdiv = 2;\n                if (ii == 1){\n                    n_tree = p.int(n_tree / 3 * 2);\n                    fdiv = 2.5;\n                }\n                for(let i=0;i<n_tree;++i){\n                    X2.push(p.random(-W/fdiv,W/fdiv));\n                }\n                C02 = n_tree;\n                for(let i=0;i<C02;++i){\n                    POSX[i] = X2[i] + W/2 + p.random(-15, 15);\n                    POSY[i] = p.random(-H/2,-H/3) + H/3 + H/6*ii;//top\n                }\n\n                T_TYPE = [];\n                T_SPEED = [];\n                T_RAD = [];\n                T_MCOH = [];\n                T_ICOH = [];\n\n                T_RED = [];\n                T_GREEN = [];\n                T_BLUE = [];\n\n                OS_X = [];\n                OS_Y = [];\n                \n                for (let i=0;i<C02;++i){\n                    T_TYPE.push(0);//p.int(p.random(2)));\n                    T_RED.push(p.random(50, 200));\n                    T_GREEN.push(p.random(50, 200));\n                    T_BLUE.push(p.random(50, 200));\n\n                    OS_X.push(p.random(-100,100));\n                    OS_Y.push(p.random(H/3));\n                }\n\n                FRAME2 = 180;\n                let cycle1 = [180];\n                let csel1 = p.int(p.random(1));\n                mx_coh = 3.;\n                flocks.push(new Flock());\n                for(let i = 0; i < 300; ++i) {\n                    let speed = p.random(6,12);\n                    flocks[ii*2+2].add(new Particle(1, 1, speed, 20, FRAME2, cycle1[csel1],  \n                                                .5, mx_coh, ii*10+15, p.int(p.random(C02))));\n                }\n\n                \n                T_SPEED = [2.5, 2];\n                T_MCOH = [0.3, 1.0];\n                T_ICOH = [0.0, 0.0];\n                T_RAD = [20, 20];\n\n                FRAME3 = 180;\n                let cycle2 = [90, 180];\n                \n                flocks.push(new Flock());\n                for(let i = 0; i < 500; ++i) {\n                    let csel2 = p.int(p.random(2));\n                    let tp_sel = p.int(p.random(C02));\n                    let tp = T_TYPE[tp_sel];\n                    flocks[ii*2+3].add(new Particle(1, 2, T_SPEED[tp], T_RAD[tp], FRAME3, cycle2[csel2],  \n                                                T_ICOH[tp], T_MCOH[tp], ii*10+5, tp_sel));\n                }\n\n            }\n\n        }\n\n        //let X2 = p.random(-W/2, W/2) + W/2;\n        let Y2 = p.random(-H/4, H/2) + H/2;\n        for(let i=0;i<C2;++i){\n            POSX[i] = p.random(-W/2,W/2)+W/2;\n            POSY[i] = p.random(-H/4,H/4)+Y2;\n        }\n\n        \n    };\n\n    p.windowResized = () => {\n        p.resizeCanvas(p.windowWidth, p.windowHeight);\n        min_width = p.min(p.width, p.height);\n        max_width = p.max(p.width, p.height);\n        p.loop();\n    }\n\n    p.draw = () => {\n        p.blendMode(p.BLEND);\n        p.background(BACK_COL);\n\n        if(p.frameCount < FRAME1) {\n            flocks[0].run();\n        }\n        else if(p.frameCount < FRAME1 + FRAME4) {\n            flocks[1].run();\n        }\n        else if(p.frameCount < FRAME1 + FRAME4 + FRAME2) {\n            flocks[2].run();\n        }\n        else if(p.frameCount < FRAME1 + FRAME4 + FRAME2 + FRAME3) {\n            flocks[3].run();\n        }\n        else if(p.frameCount < FRAME1 + FRAME4 + FRAME2*2 + FRAME3) {\n            flocks[4].run();\n        }\n        else if(p.frameCount < FRAME1 + FRAME4 + FRAME2*2 + FRAME3*2) {\n            flocks[5].run();\n        }\n\n        p.image(G, 0, 0, p.width, p.height, 0, 0, W, H);\n    };\n\n    class Flock {\n        particles;\n\n        constructor() {\n            this.particles = [];\n        }\n\n        add(particle) {\n            this.particles.push(particle);\n        }\n\n        run() {\n            this.update();\n            this.display();\n        }\n\n        update() {\n            for (let i = 0; i < this.particles.length; ++i) {\n                this.particles[i].update(this.particles);\n            }\n        }\n\n        display() {\n            for (let i = 0; i < this.particles.length; ++i) {\n                this.particles[i].display();\n            }\n        }\n    }\n\n    class Particle {\n        acceleration;\n        velocity;\n        position;\n        radius;\n        max_r;\n        color;\n        col_sep;\n        maxforce = 1.0;\n        maxspeed = 2.5;\n        minspeed = 0.001;\n        mode;\n        base;\n        ali_f = 0.0;\n        coh_f = 0.0;\n        max_coh;\n        alpha;\n        fcnt;\n        cycle;\n        lcnt;\n        fin;\n\n        constructor(mode, base, speed, max_r, lcnt, cycle, coh, mxcoh, alpha, sel) {\n            this.acceleration = p.createVector(0, 0);\n            \n            this.mode = mode;\n            this.base = base;\n            let offset_x;\n            let offset_y;\n\n            this.radius = 1;\n            this.alpha = alpha;\n\n            //let sel;\n            if(this.base == 0){\n                this.maxspeed = speed;\n                this.col_sep = 0.5;\n                this.position = p.createVector(POSX[sel], POSY[sel]);\n                this.max_r = max_r;\n                this.velocity = p.createVector(p.random(-1, 1), p.random(-1, 1));\n            }\n            if (this.mode == 1) {\n                if(this.base == 1) {\n                    offset_y = H/2;\n                    this.maxspeed = speed;\n                    this.col_sep = 0.5;\n                    this.position = p.createVector(POSX[sel] + p.random(-5,5), POSY[sel] + offset_y);\n                    this.max_r = max_r;\n                    this.velocity = p.createVector(p.random(-1, 1), p.random(0.5, 1));//;p.createVector(p.random(-1, 1), p.random(-1, 1));\n                }\n                else if(this.base == 2){\n                    if(T_TYPE[sel] == 0){\n                        offset_y = p.random(H/2);\n                        this.maxspeed = speed * (offset_y / H) * (offset_y / H) * 5;\n                        this.col_sep = 0.5;\n                        this.position = p.createVector(POSX[sel], p.max(5, POSY[sel] + offset_y));\n                        this.max_r = max_r + offset_y / H * 50;\n                        this.velocity = p.createVector(p.random(-1, 1), p.random(0.1, 1));\n                    }\n                    else {\n                        offset_x = OS_X[sel];\n                        offset_y = OS_Y[sel];\n                        this.maxspeed = speed;\n                        this.col_sep = 0.5;\n                        this.position = p.createVector(POSX[sel] + offset_x, POSY[sel] + offset_y);\n                        this.max_r = max_r;\n                        this.velocity = p.createVector(p.random(-1, 1), p.random(-1, 1));\n                    }\n                }\n                \n            }\n            else if (this.mode == 2){\n                let ratio = POSY[sel] / H + 0.2;\n                this.maxspeed = speed * 1.2 * ratio;\n                this.radius = this.radius * 1.2 * ratio;\n                this.alpha = this.alpha * 1.2 * ratio;\n                if(this.base == 1){\n                    this.col_sep = 0.5;\n                    this.position = p.createVector(POSX[sel], POSY[sel]);\n                    this.max_r = max_r;\n                    this.velocity = p.createVector(p.random(-1, 1), p.random(-1, 1));\n                }\n                // else if(this.base == 2){\n                //     this.col_sep = 0.5;\n                //     this.position = p.createVector(POSX[sel], POSY[sel]);\n                //     this.max_r = max_r;\n                //     this.velocity = p.createVector(p.random(-1, 1), p.random(-1, 1));\n                // }\n            }\n\n            \n            \n\n            //color\n            if(this.base == 0){\n                this.color = p.createVector(\n                    p.max(0, PRE_COL[ID[0]] + p.random(-50,30)),\n                    p.max(0, PRE_COL[ID[1]] + p.random(-50,30)),\n                    p.max(0, PRE_COL[ID[2]] + p.random(-50,30)),\n                );\n            }\n            if (this.mode == 1){\n                if(this.base == 1){\n                    this.color = p.createVector(\n                        p.min(255, p.max(0, 200 - PRE_COL[ID[0]] + T_RED[sel] / 6 + p.random(-100,0))),\n                        p.min(255, p.max(0, 200 - PRE_COL[ID[1]] + T_GREEN[sel] / 6 + p.random(-100,0))),\n                        p.min(255, p.max(0, 200 - PRE_COL[ID[2]] + T_BLUE[sel] / 6 + p.random(-100,0))),\n                    );\n                }\n                else if(this.base == 2){\n                    this.color = p.createVector(\n                        p.min(255, p.max(0, T_RED[sel] + p.random(-50,50))),\n                        p.min(255, p.max(0, T_GREEN[sel] + p.random(-50,50))),\n                        p.min(255, p.max(0, T_BLUE[sel] + p.random(-50,50))),\n                    );\n                }\n            }\n            else if (this.mode == 2){\n                if(this.base == 1){\n                    this.color = p.createVector(\n                        p.min(255, p.max(0, T_RED[sel] + p.random(-30,30))),\n                        p.min(255, p.max(0, T_GREEN[sel] + p.random(-30,30))),\n                        p.min(255, p.max(0, T_BLUE[sel] + p.random(-30,30))),\n                    );\n                }\n                else if(this.base == 2){\n                    this.color = p.createVector(\n                        p.max(100, p.min(255, PRE_COL[ID[0]] + p.random(0,100))),\n                        p.max(100, p.min(255, PRE_COL[ID[1]] + p.random(0,100))),\n                        p.max(100, p.min(255, PRE_COL[ID[2]] + p.random(0,100))),\n                    );\n                }\n            }\n            \n            this.ali_f = coh;\n            this.coh_f = coh;\n            this.max_coh = mxcoh;\n            \n            this.fcnt = 0;\n            this.cycle = cycle;\n            this.fin = false\n            this.lcnt = lcnt;\n        }\n\n        applyForce(force) {\n            this.acceleration.add(force);\n        }\n\n        inner_update(particles) {\n            let sep = this.separate(particles);\n            let ali = this.align(particles);\n            let coh = this.cohesion(particles);\n\n            sep.mult(1.5);\n            ali.mult(this.ali_f);\n            coh.mult(this.coh_f);\n\n            this.applyForce(sep);\n            this.applyForce(ali);\n            this.applyForce(coh);\n        }\n\n        update(particles) {\n            if(this.fcnt >= this.lcnt) {this.fin = true;}\n            if(this.fin){\n                return;\n            }\n            this.inner_update(particles);\n\n            this.velocity.add(this.acceleration);\n            if (this.base == 0) {\n                if(this.fcnt < this.lcnt / 2) {\n                    this.velocity.add(p.createVector(\n                        0, -0.1\n                    ));\n                }\n            }\n            else if (this.mode == 1 && this.base == 1) {\n                this.velocity.add(p.createVector(\n                    0.0, 0.2\n                ));\n            }\n            else {\n                if(this.fcnt < this.lcnt / 2) {\n                    this.velocity.add(p.createVector(\n                        -0.0, 0\n                    ));\n                }\n            }\n\n            this.velocity.limit(this.maxspeed);\n            this.position.add(this.velocity);\n            this.border();\n            this.acceleration.mult(0);\n\n            this.radius = p.abs(p.sin(this.fcnt/this.cycle*p.PI)) * this.max_r + 1;\n\n            if(this.base == 0){\n                this.ali_f = p.min(1.0, this.ali_f+0.05);\n                this.coh_f = p.min(this.max_coh, this.coh_f+0.05);\n            }\n            else if (this.mode == 1 && this.base == 1) {\n                this.ali_f = p.min(1.5, this.ali_f+0.03);\n                this.coh_f = p.min(this.max_coh, this.coh_f+0.05);\n            }\n            else{\n                this.ali_f = p.min(.7, this.ali_f+0.1);\n                this.coh_f = p.min(this.max_coh, this.coh_f+0.05);\n            }\n\n            if(this.fcnt < this.lcnt){\n                this.fcnt += 1;\n            }\n\n        }\n\n        border() {\n            //if(this.base != 1 || this.mode != 1){\n                if(this.position.x > W) {this.position.x -= W;}\n                else if(this.position.x < 0) {this.position.x += W;}\n            if((this.base != 1 || this.mode != 1) && this.mode != 2){\n                if(this.position.y > H) {this.position.y -= H;}\n                else if(this.position.y < 0) {this.position.y += H;}\n            }\n        }\n\n        seek(target){\n            let v = p5.Vector.sub(target, this.position);\n            v.normalize();\n            v.mult(this.maxspeed);\n            v.sub(this.velocity);\n            v.limit(this.maxforce);\n            return v;\n        }\n\n        separate(particles) {\n            let inter_range = 128.0;\n            let v = p.createVector(0, 0, 0);\n            for (let i = 0; i < particles.length; i++) {\n                let d = p5.Vector.dist(this.position, particles[i].position);\n                if (d <= 0) continue;\n\n                let col_diff = p5.Vector.sub(this.color, particles[i].color).mag() - 110;\n                if (d < inter_range + col_diff * this.col_sep) {\n                    let diff = p5.Vector.sub(this.position, particles[i].position);\n                    diff.normalize();\n                    diff.div(d);\n                    v.add(diff);\n                }\n            }\n\n            if (v.mag() > 0) {\n                v.normalize();\n                v.mult(this.maxspeed);\n                v.sub(this.velocity);\n                v.limit(this.maxforce);\n            }\n\n            return v;\n        }\n\n        align(particles) {\n            let inter_range = 128.0;\n            let v = p.createVector(0, 0, 0);\n            let count = 0;\n            for (let i = 0; i < particles.length; i++) {\n                let d = p5.Vector.dist(this.position, particles[i].position);\n                //let col_diff = p.abs(this.color - particles[i].color) - 128;\n                let col_diff = p5.Vector.sub(this.color, particles[i].color).mag() - 110;\n                if ((d > 0) && (d < inter_range - col_diff * this.col_sep)) {\n                    v.add(particles[i].velocity);\n                    count++;\n                }\n            }\n            if (count > 0) {\n                v.div(count);\n                v.normalize();\n                v.mult(this.maxspeed);\n                v.sub(this.velocity);\n                v.limit(this.maxforce);\n                return v;\n            } else {\n                return p.createVector(0, 0, 0);\n            }\n        }\n\n        cohesion(particles) {\n            let neighbor_range = 128.0;\n            let v = p.createVector(0, 0, 0);\n            let count = 0;\n            for (let i = 0; i < particles.length; i++) {\n                let d = p5.Vector.dist(this.position, particles[i].position);\n\n                let col_diff = p5.Vector.sub(this.color, particles[i].color).mag() - 110;\n                if ((d > 0) && (d < neighbor_range - col_diff * this.col_sep)) {                   \n                    v.add(particles[i].position);\n\n                    count++;\n                }\n            }\n            if (count > 0) {\n                v.div(count);\n                return this.seek(v);\n            }\n            else {\n                return p.createVector(0, 0, 0);\n            }\n        }\n\n        display(){\n            if(this.fin){return;}\n            let ratio = 1.0;\n            //if (this.base == 0){ \n                //ratio = (H - this.position.y) / H * 1. + p.random(1.0);\n                ratio = .8 + p.random(.5);\n            //}\n            if(this.base == 0){\n                ratio = ratio * (3.0 - 3 * p.sqrt(this.position.y / H) * p.random(0.8, 1.2));\n            }\n            if(this.mode == 1 && this.base == 2) {\n                ratio = ratio + p.random(-.2, 1.);\n            }\n            G.strokeWeight(this.radius);\n            G.stroke(this.color.x * ratio, this.color.y * ratio, this.color.z * ratio, this.alpha);\n            G.point(\n                this.position.x,\n                this.position.y\n            )\n            \n        }\n    }\n\n    \n    p.keyPressed = () => {\n        if(p.key == 's') {\n            p.save(\"Flocked.png\");\n        }\n        if(p.key == 'g') {\n            G.save(\"Flocked2048.png\");\n        }\n    }\n\n\n};\n\nnew p5(sketch);"
        }
      }
    },
    "tags": [
      "db34d82a-4c48-4ddd-9de5-f562d8aa1bc9"
    ],
    "id": "13dfd5b5-f0af-4783-9fe1-3ba7773bcb89",
    "async": true
  },
  "pt": {
    "slides": [
      {
        "type": "host",
        "hostNotes": [
          {
            "text": "Welcome. I am X and today we will work for around 30 minutes on xx\n\nWe’ll be doing xx ex. meditation followed by time for reflection and sharing with each other."
          },
          {
            "text": "Let’s start with a mini check-in. How are you feeling right now? Please answer in two-three words. X, would you like to start?\n\n> Let everyone in the session, including yourself, check in one by one.\n\nThank you all for checking in. Let’s get started."
          }
        ]
      },
      {
        "type": "content",
        "hostNotes": [
          {
            "text": "Find a comfortable position. I will start the audio exercise and we'll meet back here afterwards. \n\n> Push play to start the audio exercise"
          }
        ]
      },
      {
        "type": "reflection",
        "hostNotes": [
          {
            "text": "Now we’ll take 1 minute to reflect on our own.\n\nxxMain question\n\nxxFurther explanations of main question if needed"
          },
          {
            "text": "You can take notes on a piece of paper or just mental notes in your head. And there is no right or wrong here, our answers are our own. 1 minute starting now.\n\n> Press play to start the timer.\n\nThat’s 1 minute and it’s time to move on."
          }
        ]
      },
      {
        "type": "sharing",
        "hostNotes": [
          {
            "text": "Now we are getting into the sharing part. We have three rules for sharing:\n\n1. **What is said in here, stays in here.**\n2. **All you need to do is listen.** There is no fixing, helping or advice-giving needed. We are just showing up and exploring what ourselves and others are going through."
          },
          {
            "text": "3. **Everything on the inside is okay.** Anger, love, hatred, sadness. Whatever shows up. No wrongs, no rights. It is what it is.\n\nThere will be a timer set for 2 minutes as an indicator. If you don’t want to share you can always say ‘pass’."
          },
          {
            "text": "Who would like to start?\n\n> Let everyone (or as many as you got time for) share one by one. Press play to start the timer. Re-start for each new sharing.\n\nThank you so much everyone."
          }
        ],
        "id": "Sharing 1"
      },
      {
        "type": "host",
        "hostNotes": [
          {
            "text": "Well done. If you’re up for it, you can continue what we started here today with a mission to bring this into your everyday life.\n\nxx mission description"
          },
          {
            "text": "Before we leave this space let’s do a mini check-out. \n\nHow are you feeling right now? Has anything shifted? Please answer in two-three words."
          },
          {
            "text": "Who would like to start?\n\n> Let everyone in the session check out one by one.\n\nThank you all for checking out and for joining this session today.\n\n> Finish session to send everyone off to the exit experience."
          }
        ]
      },
      {
        "type": "instruction",
        "content": {
          "text": "Well done.\n\nSummary.\n\nIf you’re up for it, you can continue with this mission.\n\nmission description"
        }
      }
    ],
    "theme": {
      "textColor": "#2AE2D7"
    },
    "hidden": false,
    "locked": false,
    "live": true,
    "published": false,
    "card": {},
    "duration": 30,
    "introPortal": {
      "textColor": "#2AE2D7",
      "hostNotes": [
        {
          "text": "> Start the session when you're ready to go"
        }
      ]
    },
    "tags": [
      "db34d82a-4c48-4ddd-9de5-f562d8aa1bc9"
    ],
    "id": "13dfd5b5-f0af-4783-9fe1-3ba7773bcb89",
    "async": false
  },
  "sv": {
    "slides": [
      {
        "type": "host",
        "hostNotes": [
          {
            "text": "Welcome. I am X and today we will work for around 30 minutes on xx\n\nWe’ll be doing xx ex. meditation followed by time for reflection and sharing with each other."
          },
          {
            "text": "Let’s start with a mini check-in. How are you feeling right now? Please answer in two-three words. X, would you like to start?\n\n> Let everyone in the session, including yourself, check in one by one.\n\nThank you all for checking in. Let’s get started."
          }
        ]
      },
      {
        "type": "content",
        "hostNotes": [
          {
            "text": "Find a comfortable position. I will start the audio exercise and we'll meet back here afterwards. \n\n> Push play to start the audio exercise"
          }
        ]
      },
      {
        "type": "reflection",
        "hostNotes": [
          {
            "text": "Now we’ll take 1 minute to reflect on our own.\n\nxxMain question\n\nxxFurther explanations of main question if needed"
          },
          {
            "text": "You can take notes on a piece of paper or just mental notes in your head. And there is no right or wrong here, our answers are our own. 1 minute starting now.\n\n> Press play to start the timer.\n\nThat’s 1 minute and it’s time to move on."
          }
        ]
      },
      {
        "type": "sharing",
        "hostNotes": [
          {
            "text": "Now we are getting into the sharing part. We have three rules for sharing:\n\n1. **What is said in here, stays in here.**\n2. **All you need to do is listen.** There is no fixing, helping or advice-giving needed. We are just showing up and exploring what ourselves and others are going through."
          },
          {
            "text": "3. **Everything on the inside is okay.** Anger, love, hatred, sadness. Whatever shows up. No wrongs, no rights. It is what it is.\n\nThere will be a timer set for 2 minutes as an indicator. If you don’t want to share you can always say ‘pass’."
          },
          {
            "text": "Who would like to start?\n\n> Let everyone (or as many as you got time for) share one by one. Press play to start the timer. Re-start for each new sharing.\n\nThank you so much everyone."
          }
        ],
        "id": "Sharing 1"
      },
      {
        "type": "host",
        "hostNotes": [
          {
            "text": "Well done. If you’re up for it, you can continue what we started here today with a mission to bring this into your everyday life.\n\nxx mission description"
          },
          {
            "text": "Before we leave this space let’s do a mini check-out. \n\nHow are you feeling right now? Has anything shifted? Please answer in two-three words."
          },
          {
            "text": "Who would like to start?\n\n> Let everyone in the session check out one by one.\n\nThank you all for checking out and for joining this session today.\n\n> Finish session to send everyone off to the exit experience."
          }
        ]
      },
      {
        "type": "instruction",
        "content": {
          "text": "Well done.\n\nSummary.\n\nIf you’re up for it, you can continue with this mission.\n\nmission description"
        }
      }
    ],
    "theme": {
      "textColor": "#2AE2D7"
    },
    "hidden": false,
    "locked": false,
    "live": true,
    "published": false,
    "card": {},
    "duration": 30,
    "introPortal": {
      "textColor": "#2AE2D7",
      "hostNotes": [
        {
          "text": "> Start the session when you're ready to go"
        }
      ]
    },
    "tags": [
      "db34d82a-4c48-4ddd-9de5-f562d8aa1bc9"
    ],
    "id": "13dfd5b5-f0af-4783-9fe1-3ba7773bcb89",
    "async": false
  },
  "ja": {
    "slides": [
      {
        "type": "host",
        "hostNotes": [
          {
            "text": "Welcome. I am X and today we will work for around 30 minutes on xx\n\nWe’ll be doing xx ex. meditation followed by time for reflection and sharing with each other."
          },
          {
            "text": "Let’s start with a mini check-in. How are you feeling right now? Please answer in two-three words. X, would you like to start?\n\n> Let everyone in the session, including yourself, check in one by one.\n\nThank you all for checking in. Let’s get started."
          }
        ]
      },
      {
        "type": "content",
        "hostNotes": [
          {
            "text": "Find a comfortable position. I will start the audio exercise and we'll meet back here afterwards. \n\n> Push play to start the audio exercise"
          }
        ]
      },
      {
        "type": "reflection",
        "hostNotes": [
          {
            "text": "Now we’ll take 1 minute to reflect on our own.\n\nxxMain question\n\nxxFurther explanations of main question if needed"
          },
          {
            "text": "You can take notes on a piece of paper or just mental notes in your head. And there is no right or wrong here, our answers are our own. 1 minute starting now.\n\n> Press play to start the timer.\n\nThat’s 1 minute and it’s time to move on."
          }
        ]
      },
      {
        "type": "sharing",
        "hostNotes": [
          {
            "text": "Now we are getting into the sharing part. We have three rules for sharing:\n\n1. **What is said in here, stays in here.**\n2. **All you need to do is listen.** There is no fixing, helping or advice-giving needed. We are just showing up and exploring what ourselves and others are going through."
          },
          {
            "text": "3. **Everything on the inside is okay.** Anger, love, hatred, sadness. Whatever shows up. No wrongs, no rights. It is what it is.\n\nThere will be a timer set for 2 minutes as an indicator. If you don’t want to share you can always say ‘pass’."
          },
          {
            "text": "Who would like to start?\n\n> Let everyone (or as many as you got time for) share one by one. Press play to start the timer. Re-start for each new sharing.\n\nThank you so much everyone."
          }
        ],
        "id": "Sharing 1"
      },
      {
        "type": "host",
        "hostNotes": [
          {
            "text": "Well done. If you’re up for it, you can continue what we started here today with a mission to bring this into your everyday life.\n\nxx mission description"
          },
          {
            "text": "Before we leave this space let’s do a mini check-out. \n\nHow are you feeling right now? Has anything shifted? Please answer in two-three words."
          },
          {
            "text": "Who would like to start?\n\n> Let everyone in the session check out one by one.\n\nThank you all for checking out and for joining this session today.\n\n> Finish session to send everyone off to the exit experience."
          }
        ]
      },
      {
        "type": "instruction",
        "content": {
          "text": "Well done.\n\nSummary.\n\nIf you’re up for it, you can continue with this mission.\n\nmission description"
        }
      }
    ],
    "theme": {
      "textColor": "#2AE2D7"
    },
    "hidden": false,
    "locked": false,
    "live": true,
    "published": false,
    "card": {},
    "duration": 30,
    "introPortal": {
      "textColor": "#2AE2D7",
      "hostNotes": [
        {
          "text": "> Start the session when you're ready to go"
        }
      ]
    },
    "tags": [
      "db34d82a-4c48-4ddd-9de5-f562d8aa1bc9"
    ],
    "id": "13dfd5b5-f0af-4783-9fe1-3ba7773bcb89",
    "async": false
  }
}
